service: NM-Tlog

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  # tags: ${self:custom.tags}
  # stackTags: ${self:custom.tags}
  iamRoleStatements: # default vpc lambda permissions
  - Effect: "Allow"
    Action: 
      - "logs:CreateLogGroup"
      - "logs:CreateLogStream"
      - "logs:PutLogEvents"
      - "ec2:CreateNetworkInterface"
      - "ec2:DescribeNetworkInterfaces"
      - "ec2:DeleteNetworkInterface"
      - "ec2:AssignPrivateIpAddresses"
      - "ec2:UnassignPrivateIpAddresses"
      - 
    Resource: "*"
  - Effect: "Allow"
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    - dynamodb:BatchWriteItem
    - dynamodb:BatchGetItem
    - sqs:ReceiveMessage
    - sqs:SendMessageBatch
    - sqs:CreateQueue
    - sqs:SetQueueAttributes
    - sqs:GetQueueAttributes
    - sqs:GetQueueUrl
    - sqs:ListQueues
    - sqs:ListDeadLetterSourceQueues
    - sqs:PurgeQueue
    - sqs:ChangeMessageVisibility
    - sqs:DeleteMessage 
    Resource: 
      - !GetAtt MerchantOrderTable.Arn
      - !GetAtt SalesOrderTable.Arn
      - !GetAtt ShippingOrderTable.Arn
      - !GetAtt ActivityTable.Arn

  # environment:
  #   REGION: ${self:provider.region}
  #   ACCOUNT: ${ssm:/${self:service}/${self:provider.stage}/aws.accountNumber} #${self:custom.accountNumber}
  #   ENV: ${self:custom.stage}

custom:
  account: ${opt:account, 'bizdev'}
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  serverless-iam-roles-per-function:
    defaultInherit: true

package:
  individually: true
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

    # QueueToTriggerLambdaDLQ: ${file(config/queues/sourceEvents/nm.yml):NmSourceDynamoStreamDLQ}
    # BgSourceDynamoStreamQueue: ${file(config/queues/sourceEvents/bg.yml):BgSourceDynamoStreamQueue}
    # BgSourceDynamoStreamDLQ: ${file(config/queues/sourceEvents/bg.yml):BgSourceDynamoStreamDLQ}
    # HcSourceDynamoStreamQueue: ${file(config/queues/sourceEvents/hc.yml):HcSourceDynamoStreamQueue}
    # HcSourceDynamoStreamDLQ: ${file(config/queues/sourceEvents/hc.yml):HcSourceDynamoStreamDLQ}
# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  InsetDb:
    handler: handler.InsetDb
    package:
      patterns:
        - '!**/*'
        - 'handler.js'
        - 'node_modules/**'

resources:
  Resources:
    QueueToTriggerLambda: ${file(config/queues/snsToDynamo.yml):QueueToTriggerLambda}
    QueueToTriggerLambdaDLQ: ${file(config/queues/snsToDynamo.yml):QueueToTriggerLambdaDLQ}
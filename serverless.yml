service: NM-Tlog
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  # tags: ${self:custom.tags}
  # stackTags: ${self:custom.tags}
  layers:
    - !Ref TlogLayerLambdaLayer
  environment:
    REGION: ${self:provider.region}
    # ACCOUNT: ${ssm:/${self:service}/${self:provider.stage}/aws.accountNumber} #${self:custom.accountNumber}
    ENV: ${self:custom.stage}
    ACTIVITY_TABLE: !Ref DynamodbActivityTable 
    MERCHANT_TABLE: !Ref MerchantOrderTable
    SALES_TABLE: !Ref SalesOrderTable
    SHIPPING_TABLE: !Ref ShippingOrderTable
    RETURN_TABLE: !Ref ReturnTable
    T_Log_Table: !Ref TLogTable
  iamRoleStatements: 
  - Effect: "Allow"
    Action:
      - "logs:CreateLogGroup"
      - "logs:CreateLogStream"
      - "logs:PutLogEvents"
      - sqs:ReceiveMessage
      - sqs:CreateQueue
      - sqs:SetQueueAttributes
      - sqs:GetQueueAttributes
      - sqs:GetQueueUrl
      - sqs:ListQueues
      - sqs:ListDeadLetterSourceQueues
      - sqs:PurgeQueue
      - sqs:ChangeMessageVisibility
      - sqs:DeleteMessage 
    Resource: "*"
  - Effect: "Allow"
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    - dynamodb:BatchWriteItem
    - dynamodb:BatchGetItem
    Resource: 
      - !GetAtt MerchantOrderTable.Arn
      - !GetAtt SalesOrderTable.Arn
      - !GetAtt ShippingOrderTable.Arn
      - !GetAtt DynamodbActivityTable.Arn
      - !GetAtt ReturnTable.Arn
      - !GetAtt TLogTable.Arn





custom:
  account: ${opt:account, 'bizdev'}
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  serverless-iam-roles-per-function:
    defaultInherit: true

package:
  individually: true


functions:
  mapInsertDb: ${file(config/functions/mapInsertDb.yml):function}
  # activityInsert: ${file(config/functions/activityInsert.yml):function}
  generateTLogData: ${file(config/functions/generateTLogData.yml):function}

layers:
  TlogLayer:
    path: lambdaLayer/lib
    name: NM-Tlog-lambda-layer-${self:provider.stage}
    description: tlog lambda layer for all node modules - ${self:provider.stage}
    compatibleRuntimes:
      - nodejs14.x
    retain: false

resources:
  Resources:
    QueueToTriggerLambda: ${file(config/queues/snsToDynamo.yml):QueueToTriggerLambda}
    QueueToTriggerLambdaDLQ: ${file(config/queues/snsToDynamo.yml):QueueToTriggerLambdaDLQ}
    DynamodbActivityTable: ${file(config/dynamoDb/activity.yml):DynamodbActivityTable}
    SalesOrderTable: ${file(config/dynamoDb/salesTable.yml):SalesOrderTable} 
    MerchantOrderTable: ${file(config/dynamoDb/merchantTable.yml):MerchantOrderTable} 
    ShippingOrderTable: ${file(config/dynamoDb/shippingTable.yml):ShippingOrderTable} 
    ReturnTable: ${file(config/dynamoDb/returnTable.yml):ReturnTable}
    TLogTable: ${file(config/dynamoDb/tLogTable.yml):TLogTable}